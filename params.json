{
  "name": "Rack::TimeZoneMiddleware",
  "tagline": "Middleware helpful in UseCase of detecting TimeZone at UI side and its getting within Rack/Rails app via cookies.",
  "body": "[![Gem Version](https://badge.fury.io/rb/rack-time-zone-middleware.svg)](https://badge.fury.io/rb/rack-time-zone-middleware)\r\n[![Build Status](https://travis-ci.org/merqlove/rack-time-zone-middleware.svg?branch=master)](https://travis-ci.org/merqlove/rack-time-zone-middleware)\r\n[![Coverage Status](https://coveralls.io/repos/github/merqlove/rack-time-zone-middleware/badge.svg?branch=master)](https://coveralls.io/github/merqlove/rack-time-zone-middleware?branch=master)\r\n[![Code Climate](https://codeclimate.com/github/merqlove/rack-time-zone-middleware/badges/gpa.svg)](https://codeclimate.com/github/merqlove/rack-time-zone-middleware)\r\n\r\nAdding ability to detect timezone at UI side and get it within Rack/Rails via cookies with/o custom handler.\r\n\r\nThis gem created for usecase of loading detected TimeZone into Rails environment.  \r\nYou can set cookie with TimeZone name at UI side(from Angular, React, Ember, Backbone or vanilla JS).  \r\nAfter that all XHR requests to your Rails/Rack backend can be identified by this Middleware.  \r\nIn case when TimeZone name(s) is unsupported or key not found in cookies, middleware will fallback to defaults.  \r\nBy default we are using [ActiveSupport TimeZones](https://github.com/rails/rails/blob/master/activesupport/lib/active_support/values/time_zone.rb#L30), if AS is not installed you will receive empty list with Warning message.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'rack-time-zone-middleware'\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install rack-time-zone-middleware\r\n\r\n## Logic in detail\r\n\r\n1. UI\r\n    1. Use something like [JsTz](http://pellepim.bitbucket.org/jstz/) to determine users time-zone. \r\n    2. Write time-zone name to cookie.\r\n    3. [AngularJS Example](#angularjs)\r\n2. Ruby\r\n    1. Use one of loading ways explained below ([Usage](#usage)).\r\n    2. Provide cookie `key_name` with options, wich includes detected time-zone.\r\n    3. Provide enironment `key_name` with options, where you store its value.\r\n    4. Use `env['key_name']` to access saved value from your application or controller.\r\n  \r\n## Usage\r\n\r\n### Sinatra/Padrino application\r\n\r\n```ruby\r\nrequire 'rack/time-zone-middleware'\r\n\r\n# Default TimeZone handler.\r\nuse Rack::TimeZoneMiddleware\r\n\r\n# Configured TimeZone handler.\r\nuse Rack::TimeZoneMiddleware, default_tz: 'Europe/Moscow', \r\n                              default_as_tz: 'Moscow', \r\n                              time_zone_key: 'dummy.time_zone'\r\n                              cookie_key: 'dummy.time_zone'\r\n\r\n# Your own TimeZone handler. All options & instance methods is available through middleware parameter.\r\nuse Rack::TimeZoneMiddleware do |middleware, env|\r\n  request = ::Rack::Request.new(env)\r\n    \r\n  time_zone = request&.cookies['dummy.time_zone'] || middleware.options[:default_tz]\r\n  env['dummy.time_zone'] = middleware.find_as_time_zone(time_zone)\r\n  \r\n  middleware.app.call(env)    \r\nend\r\n```\r\n\r\n### Rails application\r\n\r\n```ruby\r\n# Default TimeZone handler.\r\nconfig.middleware.use Rack::TimeZoneMiddleware\r\n\r\n# Configured TimeZone handler.\r\nconfig.middleware.use Rack::TimeZoneMiddleware, default_tz: 'Europe/Moscow', \r\n                                                default_as_tz: 'Moscow', \r\n                                                time_zone_key: 'dummy.time_zone'\r\n                                                cookie_key: 'dummy.time_zone'\r\n\r\n# Your own TimeZone handler. All options & instance methods is available through middleware parameter.\r\nconfig.middleware.use Rack::TimeZoneMiddleware do |middleware, env|\r\n  request = ::Rack::Request.new(env)\r\n    \r\n  time_zone = request&.cookies['dummy.time_zone'] || middleware.options[:default_tz]\r\n  env['dummy.time_zone'] = middleware.find_as_time_zone(time_zone)\r\n  \r\n  middleware.app.call(env)    \r\nend\r\n```\r\n\r\nIn theory you can setup dynamic TimeZones detector(when its hash is managed from your Application, from Admin panel or something),  \r\nbut in most of realizations what i saw, it is overhead.\r\n\r\n### Options\r\n\r\n| name  | description |\r\n|---|---|\r\n| default_tz | `optional`, TimeZone name fallback value (default: 'Europe/Moscow') |\r\n| default_as_tz | `optional`, `ActiveSupport::TimeZone` key name fallback value (default: 'Moscow') |\r\n| cookie_key | `optional`, Cookie key name (default: 'dummy.time_zone') |\r\n| time_zone_key | `optional`, Environment key name (default: 'dummy.time_zone') |\r\n| time_zone_map | `optional`, TimeZone `Hash` or `lambda`, like `{'Moscow' => 'Europe/Moscow'}`. If not provided `ActiveSupport` TZInfo map will be tried. |\r\n\r\n## AngularJS\r\n\r\nTimeZone updater factory example via [JsTz](http://pellepim.bitbucket.org/jstz/)\r\n\r\n```javascript\r\nweb.services.factory('JsTz', ['ipCookie', function(ipCookie) {\r\n  return {\r\n    updateCookie: function() {\r\n      tz = jstz.determine();\r\n      name = tz.name(); \r\n      ipCookie('dummy.time_zone', name, { path: '/', expires: 21 });\r\n      return name;\r\n    }\r\n  };  \r\n}]);\r\n```\r\n\r\n## Dependencies:\r\n\r\n- [Rack](https://github.com/rack/rack)\r\n- [ActiveSupport(optional)](https://github.com/rails/rails)\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/merqlove/rack-time-zone-middleware/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n\r\nBug reports and pull requests are welcome on GitHub at https://github.com/merqlove/rack-time-zone-middleware.\r\n\r\n### Testing\r\n\r\n    $ rake test \r\n\r\n## Development\r\n\r\nTo install this gem onto your local machine, run `bundle exec rake install`. To release a new version, update the version number in `version.rb`, and then run `bundle exec rake release`, which will create a git tag for the version, push git commits and tags, and push the `.gem` file to [rubygems.org](https://rubygems.org).\r\n\r\nCopyright (c) 2016 Alexander Merkulov\r\n\r\nMIT License\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}